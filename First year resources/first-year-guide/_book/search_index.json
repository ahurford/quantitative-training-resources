[
["index.html", "Quantitative skills for first year biology Chapter 1 Introduction", " Quantitative skills for first year biology Amy Hurford 2020-01-09 Chapter 1 Introduction Quantitative skills are important in biology. Quantitative skills include performing statistical analyses, using computer software to manage and reformat data, design experiments, understand graphs, vizualizing data, identify genes from DNA sequences, construct 3D models of protiens, and make phylogenies. Many of these tasks are now performed using computers, and elements of computer programming, statistics, and applied mathematics can be useful for professional biologists. Quantitative skills are being incorporated throughout the biology major. Why is this important Why have we made the choices we did (R, pedagogy citations) "],
["entering-data.html", "Chapter 2 Entering data", " Chapter 2 Entering data "],
["submitting-your-data-to-a-repository.html", "Chapter 3 Submitting your data to a repository", " Chapter 3 Submitting your data to a repository "],
["how-to-install-r-and-r-studio.html", "Chapter 4 How to install R and R Studio 4.1 Why R 4.2 R 4.3 RStudio", " Chapter 4 How to install R and R Studio 4.1 Why R Biologists use a variety of tools and in recent years, the use of computers has become widespread. Many different softwares are used by biologists including Microsoft Office, R, Python, and ArcGIS. First year biology, will introduce you to using R to visualize data, although we note that many of the same end results could be generated using different software. Our choice of R is for the following reasons: R programming is a valued skill: citation. Reproducibility: Accessibility: R is free. No limits: while it is possible to need data visualization options or statistical analysis that are unavailable in Microsoft Excel this is rarely a problem in R: there is an R package for anything, from serious to fun). 4.2 R R can be installed from https://www.r-project.org/. If you have problems with installing R this same website provides advice on how to seek support. 4.3 RStudio R is a scripting language. R Studio is a graphical user interface (GUI) that facilitates R coding by providing buttons and menus to provide options for some commonly used commands. "],
["finding-your-way-around-rstudio.html", "Chapter 5 Finding your way around RStudio 5.1 Source pane 5.2 Console pane 5.3 Enviornment/History pane 5.4 File/Plots/Packages/Help pane", " Chapter 5 Finding your way around RStudio R studio has 4 windows (also known as “panes”) that are inter-linked. The default layout is shown in Figure 5.1. You can mover the layout of the panes and change their size and shape by clicking and dragging with your mouse along the window pane borders. The details of what happens in each pane are detailed below. 5.1 Source pane This is where you create and edit R scripts. R scripts are just text files with a “.R” extension at the end of the filename. When you’ve written and saved a script, you can re-use it for future projects. So, before you start typing here, you should save the file under a new name. 5.2 Console pane On the surface, this looks a lot like the source pane, since it’s where you can also type code. However, it differs because there is a prompt (the “&gt;” symbol) and here the code is actually evaluated. TRY IT! type 5 + 5 in the console at the prompt and press “enter”. You’ll see the R gives the correct output (10). TIP you should try to type code in the source pane, so it gets saved. You can test it by clicking the “Run” button on the top of the source pane. TIP use the console to test code/debug, or do a quick analysis. If you want to see a previous line of code you types, press the up arrow to scorss through past comments, from most to least recent. 5.3 Enviornment/History pane This pane has several tabs, we’ll discuss each in turn. 5.3.1 Environment tab This shows you the names of all data objects (e.g., vectors, matrices, dataframes) that you’ve defined in the current R session, along with information about the size of data objects. There are also clickable actions, like “Import data set”, which we’ll refer to later. 5.3.2 History tab This shows you a history of all the code you’ve previously run in the console. 5.4 File/Plots/Packages/Help pane This pane also has a few tabs 5.4.1 Files tab This tab gives you access to the file directory on your own computer. It’s a useful spot to set your working directory (see chapter 6). 5.4.2 Plots tab This tab lets you see all the plots (graphs) that you create. You can also uset the buttons at the top to zoom, and to export the graph as a PDF or jpeg file. 5.4.3 Packages tab This tab shows a list of all the R packages installed on your computer (see chapter 5 for more on installing packages). It also indicates which are loaded with a check mark. 5.4.4 Help tab This lets you get help with R functions. Type the name of the function in the search window (blank bar with the magnifying glass beside it) "],
["installing-a-package.html", "Chapter 6 Installing a package", " Chapter 6 Installing a package "],
["a-simple-approach-for-loading-data-into-rstudio.html", "Chapter 7 A simple approach for loading data into RStudio", " Chapter 7 A simple approach for loading data into RStudio "],
["making-a-graph-with-ggplot-in-rstudio.html", "Chapter 8 Making a graph with ggplot in RStudio", " Chapter 8 Making a graph with ggplot in RStudio "],
["data-submission.html", "Chapter 9 Data submission", " Chapter 9 Data submission via upload file into github direct edit of github "],
["references.html", "References", " References "]
]
